name: Build and Push Lambda Docker to ECR

on:
  workflow_dispatch:
    inputs:
      ecr_repo:
        description: 'ECR repository name'
        required: true
        default: 'chatbot-document-v2-llm-lambda'
      lambda_folder:
        description: 'Folder of the Lambda to build'
        required: true
        default: 'llm_lambda'
      image_tag:
        description: 'Tag to apply to Docker image'
        required: true
        default: '0.0.1'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # 3️⃣ Login to ECR
      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      # 4️⃣ Build Docker image
      - name: Build Docker image
        run: |
          LAMBDA_FOLDER="${{ github.event.inputs.lambda_folder }}"
          IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          ECR_REPO="${{ github.event.inputs.ecr_repo }}"
          IMAGE_URI="${{ steps.ecr-login.outputs.registry }}/$ECR_REPO:$IMAGE_TAG"

          # Check if Dockerfile exists
          if [ ! -f "./Lambda/$LAMBDA_FOLDER/Dockerfile" ]; then
            echo "ERROR: Dockerfile not found in Lambda/$LAMBDA_FOLDER"
            exit 1
          fi

          echo "Building Docker image $IMAGE_URI from folder Lambda/$LAMBDA_FOLDER"
          docker build -t $IMAGE_URI -f ./Lambda/$LAMBDA_FOLDER/Dockerfile ./Lambda/$LAMBDA_FOLDER


      # 5️⃣ Push Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          ECR_REPO="${{ github.event.inputs.ecr_repo }}"
          IMAGE_URI="${{ steps.ecr-login.outputs.registry }}/$ECR_REPO:$IMAGE_TAG"
          echo "Pushing Docker image $IMAGE_URI"
          docker push $IMAGE_URI

      # 6️⃣ Output image URI (for Terraform)
      - name: Set image URI output
        id: image
        run: |
          ECR_REPO="${{ github.event.inputs.ecr_repo }}"
          IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          echo "IMAGE_URI=${{ steps.ecr-login.outputs.registry }}/$ECR_REPO:$IMAGE_TAG" >> $GITHUB_OUTPUT
