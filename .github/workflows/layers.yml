name: Lambda Layers 

on:
  workflow_dispatch:
    inputs:
      lambda_name:
        description: "Which Lambda folder to build layer(s) for?"
        required: true
        type: choice
        options:
          - llm_lambda
          - llm_lambda_test
          - all

jobs:
  build-layer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Build, Upload & Publish Lambda Layers
        run: |
          if [ "${{ github.event.inputs.lambda_name }}" = "all" ]; then
            FUNC_DIRS=Lambda/*/
          else
            FUNC_DIRS=Lambda/${{ github.event.inputs.lambda_name }}/
          fi

          for func_dir in $FUNC_DIRS; do
            FUNC_NAME=$(basename $func_dir)
            echo "🔨 Processing function: $FUNC_NAME"

            LAYER_COUNTER=1

            for req_file in $func_dir/requirements/*.txt; do
              LAYER_LABEL="${FUNC_NAME}-Layer${LAYER_COUNTER}"
              echo "📦 Building layer: $LAYER_LABEL"

              # Clean previous build
              rm -rf python layer*.zip

              # Install dependencies
              pip install --upgrade pip
              pip install -r $req_file -t python/

              # Remove unnecessary files to reduce zip size
              find python -type d -name "__pycache__" -exec rm -rf {} +
              find python -type d -name "tests" -exec rm -rf {} +
              find python -type d -name "*.dist-info" -exec rm -rf {} +
              find python -type d -name "*.egg-info" -exec rm -rf {} +

              # Generate hash for versioning
              REQ_HASH=$(sha256sum $req_file | cut -c1-8)

              # Zip layer
              zip -r layer.zip python > /dev/null

              # Check if zip > 50MB
              SIZE=$(stat -c%s "layer.zip")
              LAYER_FILES=("layer.zip")
              if [ $SIZE -gt 50000000 ]; then
                echo "⚠️ Layer too large ($SIZE bytes). Splitting requirements..."
                rm -f layer.zip
                split -l 10 $req_file req_chunk_

                i=1
                LAYER_FILES=()
                for chunk in req_chunk_*; do
                  SUB_LAYER_LABEL="${LAYER_LABEL}-sub${i}"
                  echo "📦 Building sub-layer $i: $SUB_LAYER_LABEL"
                  rm -rf python layer_sub$i.zip
                  pip install -r $chunk -t python/
                  find python -type d -name "__pycache__" -exec rm -rf {} +
                  find python -type d -name "tests" -exec rm -rf {} +
                  find python -type d -name "*.dist-info" -exec rm -rf {} +
                  find python -type d -name "*.egg-info" -exec rm -rf {} +
                  zip -r layer_sub$i.zip python > /dev/null
                  LAYER_FILES+=("layer_sub$i.zip")
                  i=$((i+1))
                done
              fi

              # Upload & publish each zip
              for zip_file in "${LAYER_FILES[@]}"; do
                TIMESTAMP=$(date +%s)
                S3_BUCKET=org-dev-chatbot-document-v2-s3-my-lambda-layers-bucket
                # S3 path: function / layer label / zip
                LAYER_KEY=Lambda-layers/$FUNC_NAME/$LAYER_LABEL/${zip_file%.zip}-$TIMESTAMP-$REQ_HASH.zip

                # Upload to S3
                aws s3 cp $zip_file s3://$S3_BUCKET/$LAYER_KEY

                # Publish Lambda layer
                VERSION=$(aws lambda publish-layer-version \
                  --layer-name $LAYER_LABEL \
                  --content S3Bucket=$S3_BUCKET,S3Key=$LAYER_KEY \
                  --compatible-runtimes python3.11 \
                  --description "Requirements hash: $REQ_HASH" \
                  --query Version \
                  --output text)

                # Metadata JSON
                LAYER_INFO=$(jq -n \
                  --arg name "$LAYER_LABEL" \
                  --arg version "$VERSION" \
                  --arg hash "$REQ_HASH" \
                  --arg s3key "$LAYER_KEY" \
                  '{layer_name: $name, layer_version: $version, requirements_hash: $hash, s3_key: $s3key}')

                # Save JSON for future workflow steps
                echo "$LAYER_INFO" >> $FUNC_NAME-layers.json

                # Log
                echo "✅ Layer Published:"
                echo "$LAYER_INFO"
              done

              LAYER_COUNTER=$((LAYER_COUNTER + 1))
            done
          done
